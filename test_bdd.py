# coding: utf-8
import unittest
import sqlite3
#import module_repertoire
#import os

# Autogenerated with DRAKON Editor 1.28

def nline2_1line(chaine):
    #item 124
    return  chaine.replace('\n',' ')

class testbdd(unittest.TestCase):
    """nettoyage table vs space ok space partout"""
    



    def setUpClass(cls):
        #item 110
        """AVANT TOUS LES TESTS 
        env test:
        une bdd en m√©moire"""
        #item 54
        cls.cnx = sqlite3.connect(':memory:')
        """ nettoyage tab vs space ok. spaces ok"""
        with open('schema.sql','r') as f:
            req = f.read()
            req = nline2_1line(req)
            """il faut utiliser l objet de classe partage cnx pour
            pouvoir partager et modifier son etat"""
            cur = cls.cnx.cursor()
            cur.execute(req)


    def tearDownClass(cls):
        #item 111
        """supprimer les bases ouvertes en memoire...
        en refermant la connexion"""
        """ il faut utiliser un objet partage de classe cnx pour
        pouvoir le modifier sur site"""
        
        cls.cnx.close()


    def test_get_poste(self):
        #item 163
        import xpld
        ligne = "1,2,3 1 2016 P1"
        poste_voulu = "P1"
        poste_obtenu = xpld.xpld().get_poste(ligne)
        self.assertEqual(poste_voulu,poste_obtenu)


    def test_lambda(self):
        #item 157
        import functools
        somme = functools.reduce (lambda x, y: x + y, [1,1,1,1,1])
        self.assertEqual(somme,5)


    def test_re(self):
        #item 137
        import re
        #item 139
        ligne = "1,2,3,12,22,30 1 2016 P1"
        #item 138
        pat = re.compile(r"""(^(\d+,*)+) (\d{1,2}) (\d{4,4}) (\w{2,2})""")
        #item 140
        match = re.search(pat, ligne)
        #item 141
        if match:
            jours = match.group(1)
            mois = match.group(3)
            annee = match.group(4)
            poste = match.group(5)
            self.assertEqual(jours, "1,2,3,12,22,30")
            self.assertEqual(mois,"1")
            self.assertEqual(annee, "2016")
            self.assertEqual(poste, "P1")
        else:
            self.assertFalse()


    def test_re_nommee(self):
        #item 147
        import re
        #item 149
        ligne = "1,2,3,12,22,30 1 2016 P1"
        #item 148
        pat = re.compile(r"""
        (?P<jours>^(\d+,*)+)\s
        (?P<mois>\d{1,2})\s
        (?P<annee>\d{4,4})\s
        (?P<poste>\w{2,2})
        """,re.VERBOSE)
        #item 150
        match = re.search(pat, ligne)
        #item 151
        if match:
            jours = match.group('jours')
            mois = match.group('mois')
            annee = match.group('annee')
            poste = match.group('poste')
            self.assertEqual(jours, "1,2,3,12,22,30")
            self.assertEqual(mois,"1")
            self.assertEqual(annee, "2016")
            self.assertEqual(poste, "P1")
        else:
            self.assertFalse()


    def test_schema(self):
        #item 117
        """verifie que la table est bien creee:
        elle est bien creee si son nom est bien dans la liste des tables"""
        #item 118
        cur = self.__class__.cnx.cursor()
        nom_table = 'planning'
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?;", (nom_table,))
        # la req preparee avec des '?' serait plus safe. elle prend (uneseq,)
        
        table_trouvee = cur.fetchone()[0] 
        # resultat de fetchone est une seq.
        
        
        self.assertEqual(table_trouvee, nom_table)


    def test_xpld(self):
        #item 130
        import xpld
        objet_xpld = xpld.xpld()
        #item 131
        ligne = "1,2,3 1 2016 P1"
        ligne_no_poste = "1,2 1 2016"
        # verif du domaine du type ligne : type jours + type mois + type annee + type poste:
        self.assertEqual(objet_xpld.validate_poste("P1"),True)
        self.assertEqual(objet_xpld.validate_poste("XK"),False)
        self.assertEqual(objet_xpld.validate_month("1"),True)
        self.assertEqual(objet_xpld.validate_month("13"),False)
        self.assertEqual(objet_xpld.validate_month("12"),True)
        self.assertEqual(objet_xpld.validate_month("aaa"),False)
        self.assertEqual(objet_xpld.validate_year("aaa"),False)
        self.assertEqual(objet_xpld.validate_year("2012"),True)
        self.assertEqual(objet_xpld.validate_year("1998"),False)
        self.assertEqual(objet_xpld.validate_year("2022"),False)
        self.assertEqual(objet_xpld.valider_ligne(ligne), True)
        self.assertEqual(objet_xpld.valider_ligne(ligne_no_poste), False)
        
        # verif des differentes extractions jours, mois, annee, poste
        self.assertEqual(objet_xpld.split_virg("1,2,3"),[1,2,3])
        self.assertEqual(objet_xpld.get_days(ligne),"1,2,3")
        self.assertEqual(objet_xpld._get_split_or_die(ligne,'jours'),"1,2,3")
        self.assertEqual(objet_xpld.get_month(ligne),1)
        self.assertEqual(objet_xpld.get_year(ligne),2016)
        self.assertEqual(objet_xpld.get_poste(ligne),"P1")
        
        # verif utilitaire reel version en une fois
        self.assertEqual(objet_xpld.xplode(ligne),[{'day': 1, 'month':1, 'year':2016, 'poste' : 'P1'},
        {'day': 2, 'month':1, 'year':2016, 'poste': 'P1'},{'day': 3, 'month':1, 'year':2016, 'poste' : 'P1'}])
        # verif utilitaire reel version iterateur
        ite = objet_xpld.xplode_ite(ligne)
        for i in [1,2,3]:
            self.assertEqual(next(ite), {'day':i, 'month' : 1, 'year': 2016, 'poste': 'P1'})
        
        #main : argparse et verifs sur boucle principale
        #verif exception si ouverture de fichier pas present
        def file_noo():
            objet_xpld.file_operations(objet_xpld.display_results,"fichierexistepas.txt")
        self.assertRaises(IOError,file_noo)
        #verif fonctionnement ok de objet_xpld.display_results
        # en ligne de commande, pas le choix
        # fait, peniblement.
        
        # test du lancement de main avec argparse.
        import argparse
        parsed = argparse.Namespace()
        # pas de gui pas de fichier mais une valeur pour jour mois annee et poste
        parsed.gui = False
        parsed.file = False
        parsed.jours = "1,2,3"
        parsed.mois = "1"
        parsed.annee = "2016"
        parsed.poste = "P1"
        objet_xpld.main("",parsed)

    setUpClass = classmethod(setUpClass)
    tearDownClass = classmethod(tearDownClass)
