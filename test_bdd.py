# coding: utf-8
import unittest
import sqlite3
#import module_repertoire
#import os

# Autogenerated with DRAKON Editor 1.27

def nline2_1line(chaine):
    #item 124
    return  chaine.replace('\n',' ')

class testbdd(unittest.TestCase):
    """nettoyage table vs space ok space partout"""
    cnx = sqlite3.connect(':memory:')



    def setUpClass(cls):
        #item 110
        """AVANT TOUS LES TESTS 
        env test:
        une bdd en mémoire"""
        #item 54
        #cnx = sqlite3.connect(':memory:')
        """ nettoyage tab vs space ok. spaces ok"""
        with open('schema.sql','r') as f:
            req = f.read()
            req = nline2_1line(req)
            """il faut utiliser l objet de classe partage cnx pour
            pouvoir partager et modifier son etat"""
            cur = self.__class__.cnx.cursor()
            cur.execute(req)


    def tearDown(self):
        #item 111
        """supprimer les bases ouvertes en memoire...
        en refermant la connexion"""
        """ il faut utiliser un objet partage de classe cnx pour
        pouvoir le modifier sur site"""
        
        self.__class__.cnx.close()


    def test_schema(self):
        #item 117
        """verifie que la table est bien creee:
        elle est bien creee si son nom est bien dans la liste des tables"""
        #item 118
        cur = self.__class__.cnx.cursor()
        nom_table = 'planning'
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?;", (nom_table,))
        # la req preparee avec des '?' serait plus safe. elle prend (uneseq,)
        
        table_trouvee = cur.fetchone()[0] 
        # resultat de fetchone est une seq.
        
        
        self.assertEqual(table_trouvee, nom_table)


    def test_xpld(self):
        #item 130
        import xpld
        #item 131
        ligne = "1,2,3 1 2016 P1"
        self.assertEqual(objet_xpld.split_virg("1,2,3"),[1,2,3])
        self.assertEqual(objet_xpld.get_days(ligne),"1,2,3")
        self.assertEqual(objet_xpld.get_month(ligne),"1")
        self.assertEqual(objet_xpld.get_year(ligne),"2016")
        self.assertEqual(objet_xpld.get_poste(ligne),"P1")
        self.assertEqual(objet_xpld.xplode(ligne),[{day: 1, month:1, year:2016},
        {day: 2, month:1, year:2016},{day: 3, month:1, year:2016}])
        self.assertEqual(objet_xpld.validate_poste("P1"),True)
        self.assertEqual(objet_xpld.validate_poste("XK"),False)
        self.assertEqual(objet_xpld.validate_month("13"),False)
        self.assertEqual(objet_xpld.validate_year("aaa"),False)
        ite = objet_xpld.xplode_ite(ligne)
        for i in [1,2,3]:
            self.assertEqual(ite.next(), i)


